
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using BytexDigital.RGSM.Node.Application.Core.Features.Workshop.Commands;
using BytexDigital.RGSM.Node.Application.Core.Generic;

namespace BytexDigital.RGSM.Node.Application.Core.Arma3
{
    public class ArmaArgumentStringBuilder : ArgumentStringBuilder
    {
        private readonly ArmaServerState _armaServerState;

        public ArmaArgumentStringBuilder(ArmaServerState armaServerState)
        {
            _armaServerState = armaServerState;
        }

        public override async Task<string> BuildAsync(CancellationToken cancellationToken = default)
        {
            List<string> arguments = new List<string>();

            arguments.Add("-server");
            arguments.Add($"-port={_armaServerState.Settings.Port}");
            arguments.Add($"-bepath={await _armaServerState.GetBattlEyePathAsync(cancellationToken)}");
            arguments.Add($"-config={Path.Combine(".rgsm", "server.cfg")}");
            arguments.Add($"-profiles={await _armaServerState.GetProfilesPathAsync(cancellationToken)}");
            arguments.Add($"-mod={string.Join(";", (await GetModPathsAsync(cancellationToken)).Select(x => x.Path))}");

            return await Task.FromResult(string.Join(" ", arguments.Select(x => $"\"{x}\"")));
        }

        public async Task<List<(bool Managed, string Path)>> GetModPathsAsync(CancellationToken cancellationToken = default)
        {
            List<(bool, string)> mods = new List<(bool, string)>();

            var workshopMods = _armaServerState.Settings.WorkshopMods;

            foreach (var workshopMod in workshopMods)
            {
                mods.Add((true, workshopMod.Directory));
            }

            // Merge with unmanaged mods
            var customArguments = await GetAdditionalArgumentsAsync(cancellationToken);
            var modArguments = customArguments.FirstOrDefault(x => x.StartsWith("-mod="));

            if (!string.IsNullOrEmpty(modArguments))
            {
                var paths = modArguments.Substring(5).Split(";", System.StringSplitOptions.RemoveEmptyEntries);

                foreach (var path in paths)
                {
                    mods.Add((false, path));
                }
            }

            return mods;
        }

        public Task<List<string>> GetAdditionalArgumentsAsync(CancellationToken cancellationToken = default)
        {
            if (_armaServerState.Settings.AdditionalArguments == null) return Task.FromResult(new List<string>());

            // Read additional custom arguments in a manner so we can better merge them with autogenerated arguments
            List<string> customArguments = new List<string>();

            StringBuilder argumentBuilder = new StringBuilder();
            bool interpretSpaceAsLiteral = false;

            foreach (var character in _armaServerState.Settings.AdditionalArguments)
            {
                if (character == '"')
                {
                    interpretSpaceAsLiteral = !interpretSpaceAsLiteral;
                    continue;
                }

                if (character == ' ' && !interpretSpaceAsLiteral)
                {
                    customArguments.Add(argumentBuilder.ToString());
                    argumentBuilder = new StringBuilder();
                    continue;
                }

                argumentBuilder.Append(character);
            }

            customArguments.Add(argumentBuilder.ToString());

            return Task.FromResult(customArguments);
        }
    }
}
